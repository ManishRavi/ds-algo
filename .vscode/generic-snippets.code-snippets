{
	// Place your ds-algo workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// },
	"TPSWS": {
		"scope": "",
		"prefix": "TPSWS",
		"body": [
			"",
			"# * Two Pointers and Sliding Window Solution | O(n$1) Time | O(n$2) Space",
			"# * n -> The length of $3 $0",
			""
		],
		"description": ""
	},
	"TPS": {
		"scope": "",
		"prefix": "TPS",
		"body": [
			"",
			"# * Two Pointers Solution | O(n$1) Time | O(1$2) Space",
			"# * n -> The length of $3 $0",
			""
		],
		"description": ""
	},
	"RTDFSS": {
		"scope": "",
		"prefix": "RTDFSS",
		"body": [
			"",
			"# * Recursive DFS Solution | O(n$1) Time | O(h$2) Space",
			"# * n -> The number of nodes in the tree | h -> The height of the tree $0",
			""
		],
		"description": ""
	},
	"ITBFSS": {
		"scope": "",
		"prefix": "ITBFSS",
		"body": [
			"",
			"# * Iterative BFS Solution | O(n$1) Time | O(n$2) Space",
			"# * n -> The number of nodes in the tree $0",
			""
		],
		"description": ""
	},
	"ITBLOTS": {
		"scope": "",
		"prefix": "ITBLOTS",
		"body": [
			"",
			"# * Iterative BFS Level Order Traversal Solution | O(n$1) Time | O(n$2) Space",
			"# * n -> The number of nodes in the tree $0",
			""
		],
		"description": ""
	},
	"RMGDFSS": {
		"scope": "",
		"prefix": "RMGDFSS",
		"body": [
			"",
			"# * Recursive DFS Solution | O(mn$1) Time | O(mn$2) Space",
			"# * m -> The number of rows in the $3 matrix | n -> The number of columns in the $3 matrix $0",
			""
		],
		"description": ""
	},
	"IMGBFSS": {
		"scope": "",
		"prefix": "IMGBFSS",
		"body": [
			"",
			"# * Iterative BFS Solution | O(mn$1) Time | O(mn$2) Space",
			"# * m -> The number of rows in the $3 matrix | n -> The number of columns in the $3 matrix $0",
			""
		],
		"description": ""
	},
	"RGDFSS": {
		"scope": "",
		"prefix": "RGDFSS",
		"body": [
			"",
			"# * Recursive DFS Solution | O(v+e$1) Time | O(v+e$2) Space",
			"# * v -> The number of vertices in the graph | e -> The number of edges in the graph $0",
			""
		],
		"description": ""
	},
	"IGBFSS": {
		"scope": "",
		"prefix": "IGBFSS",
		"body": [
			"",
			"# * Iterative BFS Solution | O(v+e$1) Time | O(v+e$2) Space",
			"# * v -> The number of vertices in the graph | e -> The number of edges in the graph $0",
			""
		],
		"description": ""
	},
	"DSUS": {
		"scope": "",
		"prefix": "DSUS",
		"body": [
			"",
			"# * Disjoint Set Union Solution | O(v+e$1) Time | O(v+e$2) Space",
			"# * v -> The number of vertices in the graph | e -> The number of edges in the graph $0",
			""
		],
		"description": ""
	},
	"BTS": {
		"scope": "",
		"prefix": "BTS",
		"body": [
			"",
			"# * Backtracking Solution | O(n*(2^n)$1) Time | O(n$2) Space",
			"# * n -> The length of $3 array $0",
			""
		],
		"description": ""
	},
	"RTD1DPS": {
		"scope": "",
		"prefix": "RTD1DPS",
		"body": [
			"",
			"# * Recursive Top-Down Solution | O(n$1) Time | O(n$2) Space",
			"# * n -> The length of $3 array $0",
			""
		],
		"description": ""
	},
	"RBU1DPS": {
		"scope": "",
		"prefix": "RBU1DPS",
		"body": [
			"",
			"# * Recursive Bottom-Up Solution | O(n$1) Time | O(n$2) Space",
			"# * n -> The length of $3 array $0",
			""
		],
		"description": ""
	},
	"ITD1DPS": {
		"scope": "",
		"prefix": "ITD1DPS",
		"body": [
			"",
			"# * Iterative Top-Down Solution | O(n$1) Time | O(n$2) Space",
			"# * n -> The length of $3 array $0",
			""
		],
		"description": ""
	},
	"IBU1DPS": {
		"scope": "",
		"prefix": "IBU1DPS",
		"body": [
			"",
			"# * Iterative Bottom-Up Solution | O(n$1) Time | O(n$2) Space",
			"# * n -> The length of $3 array $0",
			""
		],
		"description": ""
	},
	"RTD2DPS": {
		"scope": "",
		"prefix": "RTD2DPS",
		"body": [
			"",
			"# * Recursive Top-Down Solution | O(mn$1) Time | O(mn$2) Space",
			"# * m -> The number of rows in the $3 matrix | n -> The number of columns in the $3 matrix $0",
			""
		],
		"description": ""
	},
	"RBU2DPS": {
		"scope": "",
		"prefix": "RBU2DPS",
		"body": [
			"",
			"# * Recursive Bottom-Up Solution | O(mn$1) Time | O(mn$2) Space",
			"# * m -> The number of rows in the $3 matrix | n -> The number of columns in the $3 matrix $0",
			""
		],
		"description": ""
	},
	"ITD2DPS": {
		"scope": "",
		"prefix": "ITD2DPS",
		"body": [
			"",
			"# * Iterative Top-Down Solution | O(mn$1) Time | O(mn$2) Space",
			"# * m -> The number of rows in the $3 matrix | n -> The number of columns in the $3 matrix $0",
			""
		],
		"description": ""
	},
	"IBU2DPS": {
		"scope": "",
		"prefix": "IBU2DPS",
		"body": [
			"",
			"# * Iterative Bottom-Up Solution | O(mn$1) Time | O(mn$2) Space",
			"# * m -> The number of rows in the $3 matrix | n -> The number of columns in the $3 matrix $0",
			""
		],
		"description": ""
	},
	"KAS": {
		"scope": "",
		"prefix": "KAS",
		"body": [
			"",
			"# * Kadane's Algorithm Solution | O(n$1) Time | O(1$2) Space",
			"# * n -> The length of $3 array $0",
			""
		],
		"description": ""
	},
	"GS": {
		"scope": "",
		"prefix": "GS",
		"body": [
			"",
			"# * Greedy Solution | O(n$1) Time | O(1$2) Space",
			"# * n -> The length of $3 array $0",
			""
		],
		"description": ""
	},
	"MS": {
		"scope": "",
		"prefix": "MS",
		"body": [
			"",
			"# * Math Solution | O(n$1) Time | O(1$2) Space",
			"# * n -> The length of $3 array $0",
			""
		],
		"description": ""
	},
	"BMS": {
		"scope": "",
		"prefix": "BMS",
		"body": [
			"",
			"# * Bit Manipulation Solution | O(n$1) Time | O(1$2) Space",
			"# * n -> The length of $3 array $0",
			""
		],
		"description": ""
	},
	"PQS": {
		"scope": "",
		"prefix": "PQS",
		"body": [
			"",
			"# * Priority Queue (Min Heap) Solution | O(nlogn$1) Time | O(n$2) Space",
			"# * n -> The length of $3 array $0",
			""
		],
		"description": ""
	},
}